openapi: 3.1.0
info:
  title: ITDA
  description: ITDA API docs
  version: 0.0.0
servers:
  - url: https://0.0.0.0/api/v1
tags:
  - name: Auth
    description: Authentication Operations
  - name: My Profile
    description: User Profile related Operations
  - name: Programs
    description: Government Program related Operations
paths:
  /auth/signup:
    post:
      tags:
        - Auth
      summary: Sign up for the service
      description: Sign up for the service
      requestBody:
        required: true
        description: Signup credentials
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        '200':
          description: Sign up successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        default:
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate user
      description: Log in with email and password to receive JWT tokens.
      requestBody:
        required: true
        description: Login credentials
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        default:
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Log out current user
      description: Invalidate current user token
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful
        default:
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /my-profile:
    get:
      tags:
        - My Profile
      summary: Get user profile
      description: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - My Profile
      summary: Update user profile
      description: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Updated user profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        '200':
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /programs:
    get:
      tags:
        - Programs
      summary: Get programs
      description: Get programs specific for the user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgramSummary'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /programs/{id}:
    get:
      tags:
        - Programs
      summary: Get program details
      description: Retrieve detailed information about a program by its ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the program to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    AuthRequest:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: this-is-password
      required:
        - email
        - password
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        tokenType:
          type: string
          example: Bearer
        expiresIn:
          type: integer
          example: 3600
      required:
        - code
        - message

    ProfileResponse:
      type: object
      properties:
        id:
          type: string
          example: abcdef123456
        email:
          type: string
          example: john@email.com
        name:
          type: string
          example: John Doe
        birthDate:
          type: string
          format: date
          description: 사용자 생년월일
          example: 1988-01-01
        gender:
          type: string
          description: 성별 (남성/여성/비공개 등)
          enum:
            - 무관
            - 남성
            - 여성
          example: 남성
        address:
          type: string
          description: 사용자의 주소지
          example: 서울특별시 강남구 테헤란로 123
        maritalStatus:
          type: string
          description: 결혼 여부
          enum:
            - 무관
            - 미혼
            - 기혼
            - 이혼/사별
          example: 기혼
        educationLevel:
          type: string
          description: 최종 학력
          enum:
            - 무관
            - 고졸
            - 전문대졸
            - 재학생
            - 휴학생
            - 졸업예정
            - 대졸
            - 석사
            - 박사
          example: 대졸
        householdSize:
          type: integer
          format: int32
          description: 가구원 수
          minimum: 1
          example: 4
        householdIncome:
          type: integer
          format: int64
          description: 연간 가구원 소득(만원)
          example: 7500
        employmentStatus:
          type: string
          description: 고용 상태
          enum:
            - 무관
            - 재직자
            - 미취업자
            - 자영업자
          example: 재직자
    ProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        birthDate:
          type: string
          format: date
          description: 사용자 생년월일
          example: 1988-01-01
        gender:
          type: string
          description: 성별 (남성/여성/비공개 등)
          enum:
            - ANY
            - MALE
            - FEMALE
          example: FEMALE
        address:
          type: string
          description: 사용자의 주소지
          example: 서울특별시 강남구 테헤란로 123
        maritalStatus:
          type: string
          description: 결혼 여부
          enum:
            - ANY
            - SINGLE
            - MARRIED
            - DIVORCED_OR_BEREAVED
          example: MARRIED
        educationLevel:
          type: string
          description: 최종 학력
          enum:
            - ANY
            - HIGHSCHOOL
            - ASSOCIATE
            - STUDENT
            - LEAVE_OF_ABSENCE
            - EXPECTED_GRADUATION
            - BACHELOR
            - MASTER
            - PHD
          example: EXPECTED_GRADUATION
        householdSize:
          type: integer
          format: int32
          description: 가구원 수
          minimum: 1
          example: 4
        householdIncome:
          type: integer
          format: int64
          description: 연간 가구원 소득(만원)
          example: 7500
        employmentStatus:
          type: string
          description: 고용 상태
          enum:
            - ANY
            - EMPLOYED
            - UNEMPLOYED
            - SELF_EMPLOYED
          example: EMPLOYED
    Program:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: '프로그램의 내부 식별자 (ID)'
          example: 1234
        uuid:
          type: string
          format: uuid
          description: '프로그램의 고유 식별자 (UUID)'
          example: abcdef123456
        title:
          type: string
          description: '프로그램 제목'
          example: "민생지원금 2차"
        details:
          type: string
          description: '프로그램 상세 내용'
          example: '코로나 19로 인한 경제적 피해를 극복하기 위한 지원금'
        applicationMethod:
          type: string
          description: '신청 방법'
          example: '온라인 신청'
        referenceUrl:
          type: string
          format: url
          description: '참고 자료 URL'
          example: 'https://example.com/ref'
        eligibilityGender:
          type: string
          description: '지원 대상 성별 (예: 남성, 여성, 무관)'
          enum:
            - 무관
            - 남성
            - 여성
          example: 여성
        eligibilityMinAge:
          type: integer
          format: int32
          description: '최소 연령'
          example: 19
        eligibilityMaxAge:
          type: integer
          format: int32
          description: '최대 연령'
          example: 65
        eligibilityRegion:
          type: string
          description: '지원 대상 지역'
          example: '서울시'
        eligibilityMaritalStatus:
          type: string
          description: '지원 대상 결혼 상태 (예: 미혼, 기혼, 무관)'
          enum:
            - 무관
            - 미혼
            - 기혼
            - 이혼/사별
          example: 기혼
        eligibilityEducation:
          type: string
          description: '지원 대상 학력 수준 (예: 고졸, 학사, 무관)'
          enum:
            - 무관
            - 고졸
            - 전문대졸
            - 재학생
            - 휴학생
            - 졸업예정
            - 대졸
            - 석사
            - 박사
          example: 대졸
        eligibilityMinHousehold:
          type: integer
          format: int32
          description: '최소 가구원 수'
          example: 1
        eligibilityMaxHousehold:
          type: integer
          format: int32
          description: '최대 가구원 수'
          example: 4
        eligibilityMinIncome:
          type: integer
          format: int64 
          description: '최소 가구 소득 (원)'
          example: 0
        eligibilityMaxIncome:
          type: integer
          format: int64
          description: '최대 가구 소득 (원)'
          example: 70000000
        eligibilityEmployment:
          type: string
          description: '지원 대상 고용 상태 (예: 재직자, 미취업자, 무관)'
          enum:
            - 무관
            - 재직자
            - 미취업자
            - 자영업자
          example: 재직자
        applyStartAt:
          type: string
          format: OffsetDateTime
          description: '신청 시작 일시'
          example: '2024-01-01T09:00:00+09:00'
        applyEndAt:
          type: string
          format: OffsetDateTime
          description: '신청 종료 일시'
          example: '2024-03-31T18:00:00+09:00'
        createdAt:
          type: string
          format: OffsetDateTime
          description: '생성 일시'
          example: '2023-12-01T10:00:00+09:00'
        updatedAt:
          type: string
          format: OffsetDateTime
          description: '최종 수정 일시'
          example: '2024-01-05T11:30:00+09:00'
    ProgramSummary:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1234
        title:
          type: string
          example: "민생지원금 2차"
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT